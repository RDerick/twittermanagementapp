package com.twitter.controller;

import java.util.ArrayList;
import java.util.List;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.SessionScoped;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.GenericType;

import com.twitter.consts.TwitterActions;
import com.twitter.model.TwitterDTO;

@ManagedBean(name = "twitterController")
@SessionScoped
public class TwitterController {

	Client client = ClientBuilder.newClient();
	private String tweetsResults;
	
			
	private String tweetBody;
	
	@SuppressWarnings("unchecked")
	public List<TwitterDTO> getAllTweets() {
		System.out.println("getAllTweets BODY RETREIEVE ");
		List<TwitterDTO> twitter =  client.target(TwitterActions.URL+TwitterActions.GET_ALL_TWEETS).request().get(new GenericType<List<TwitterDTO>>() {});
		return twitter;
	}
	
	public void saveTweet() {
		client.target(TwitterActions.URL+TwitterActions.CREATE_NEW_TWEET).request().post(Entity.json(twitterBody()),String.class);
	}
	
	private TwitterDTO twitterBody() {
		TwitterDTO dto = new TwitterDTO();
		dto.setTweetBody(tweetBody);
		return dto;
	}
	public String getTweetBody() {
		return tweetBody;
	}

	public void setTweetBody(String tweetBody) {
		this.tweetBody = tweetBody;
	}

	public String getTweetsResults() {
		return tweetsResults;
	}

	public void setTweetsResults(String tweetsResults) {
		this.tweetsResults = tweetsResults;
	}


}
