package com.twitter.services;

import java.util.Date;
import java.util.List;

import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import com.twitter.Interfaces.ITwitter;
import com.twitter.dto.TwitterDTO;
import com.twitter.entities.TwitterDetail;

import twitter4j.DirectMessage;
import twitter4j.Status;
import twitter4j.StatusUpdate;
import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;
import twitter4j.auth.AccessToken;

@Stateless
public class TwitterService implements ITwitter {

	@PersistenceContext
	EntityManager em;

	private static final String consumerKey = "yBGMGOgm8iXv5kWShCI4XwaSF";

	private static final String consumerSecret = "PjEScgvE58zDNfGiTEc9ZWVL7l7xzPNmYWR4O3Z5zjQ5B2IvW6";

	private static final String accessToken = "1187349387208474624-NDz1S4ehVotFYwjmRAmRryiNzKvZX5";

	private static final String accessTokenSecret = "55xGmX9Q8QXTdJEfcMar2pXuTK7JH1yEuyNX0lFA3NYx8";
	
	
	TwitterFactory twitterFactory = new TwitterFactory();

	Twitter twitter = twitterFactory.getInstance();

	@SuppressWarnings("unchecked")
	@Override
	public List<TwitterDTO> getAllTweetsByID() {
		Query query = em.createNamedQuery("TwitterDetail.findAll");
		return (List<TwitterDTO>) query.getResultList();
	}

	@Override
	public TwitterDetail saveTweet(TwitterDTO twitterDTO) {
		TwitterDetail twitterDetails = new TwitterDetail();
		if (twitterDTO != null) {
			twitterDetails.setTweetBody(twitterDTO.getTweetBody());
			twitterDetails.setTimeStamp(new Date());
			em.persist(twitterDetails);
			try {
				postTweet(twitterDetails.getTweetBody());
			} catch (TwitterException e) {
				e.printStackTrace();
			}
		}
		return twitterDetails;
	}

	@Override
	public void postTweet(String tweetBody) throws TwitterException {
		
		String recipiantName = "@Derick77342039";
		
		twitter.setOAuthConsumer(consumerKey, consumerSecret);

		twitter.setOAuthAccessToken(new AccessToken(accessToken, accessTokenSecret));

		StatusUpdate statusUpdate = new StatusUpdate(tweetBody);

		twitter.updateStatus(statusUpdate);
		sendDirectTweetMessage(recipiantName,tweetBody);
	}

	@Override
	public DirectMessage sendDirectTweetMessage(String recipientName, String message) throws TwitterException {
		return twitter.sendDirectMessage(recipientName, message);
	}

	@Override
	public List<Status> getAllPost() throws TwitterException {
		twitter.getHomeTimeline();
		return null;
	}
	
}
